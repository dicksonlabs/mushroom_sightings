# This is log of setup on ubuntu 10.10 on 6sync server, Feb-Mar 2011. -Jason
# Tested Mar 14, 2011. -Jason
#
# NOTE: I have added the yum equivalents to apt-get for Fedora / CentOS in
# comments next to each apt-get line.  I can't guarantee these are all the ones
# required.  Also note that a few configuration files will be in different
# locations, and you will need to use chkconfig instead of update-rc.d.
#
# ubuntu 10.10
# ruby 1.9.2-p180
# rubygems 1.6.2
# passenger 3.0.5
# apache2 2.2.16
# postfix 2.7.1
# mysql 14.14

# Initial set up.
local> ssh root@xxx.xxx.xxx.xxx
root> echo xxx.xxx.xxx.xxx > /etc/ip
root> passwd
root> apt-get update
root> apt-get install tcsh mlocate man vim lynx telnet emacs wget \
                      build-essential iptables bison
root> # yum update
root> # yum install tcsh mlocate gcc make vim lynx telnet emacs bind-utils

# Create your user account:
root> useradd -m -s /bin/tcsh mo
root> passwd -l mo
root> visudo
  # Add these lines to end. Allows users in "mo" group to "sudo su mo".
  %mo ALL = NOPASSWD: /bin/su mo
  %mo ALL = NOPASSWD: /bin/su - mo
root> useradd -m -G mo -s /bin/tcsh jason
root> passwd jason
root> logout

# Password-less ssh.
local> ssh-keygen -t rsa   # (if not already done)
local> ssh-copy-id -i ~/.ssh/id_rsa.pub `cat /etc/ip`

# Setup user accounts.
local> ssh xxx.xxx.xxx.xxx
jason> vi .tcshrc
  alias root sudo
  alias cls clear
  alias cd.. cd ..
  alias dirf ls -alF
  alias dirt ls -alFrt
  alias md mkdir
  alias rd rmdir
  alias del rm
  alias mv mv -i
  alias cp cp -i
  alias grep grep -s
  alias +x chmod a+x
  alias -x chmod a-x
  alias mo 'cd /var/web/mo; sudo su - mo'
jason> vi .vimrc
  syntax off
  set nohlsearch
  set ts=2
  set sw=2
  set et
  set nowrap
jason> source .tcshrc
jason> su root
root> cp .tcshrc /root
root> cp .tcshrc /home/mo
root> cp .vimrc /root
root> cp .vimrc /home/mo
root> chmod 660 /home/*/.tcshrc
root> vi /root/.tcshrc
  # Add this line.
  setenv CFLAGS "-O3 -m64 -march=core2"
root> vi /home/mo/.tcshrc
  # Delete "alias mo..." and add these.
  alias mo 'cd /var/web/mo'
  alias mosql  "mysql -u mo -p'xxx' mo_production"
  alias mosqle "mysql -u mo -p'xxx' mo_production -e 'source \!^'"
root> vi /home/mo/.login
  setenv TZ 'Eastern Time (US & Canada)'
  setenv RAILS_ENV production
  cd /var/web/mo
root> chown mo:mo /home/mo/.*
root> tcsh

# Disable direct root login.
root> vi /etc/ssh/sshd_config
  # Change this line to "no".
  PermitRootLogin no

# Configure firewall.
root> iptables -F
root> iptables -P INPUT ACCEPT
root> iptables -P OUTPUT ACCEPT
root> iptables -P FORWARD ACCEPT
root> iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
root> iptables -A INPUT -i lo -j ACCEPT
root> iptables -A INPUT -p icmp -j ACCEPT
root> iptables -A INPUT -m state --state NEW -p tcp --dport 22   -j ACCEPT
root> iptables -A INPUT -m state --state NEW -p tcp --dport 80   -j ACCEPT
root> iptables -A INPUT -m state --state NEW -p tcp --dport 25   -j ACCEPT
root> iptables -A INPUT -m state --state NEW -p tcp --dport 3306 -j ACCEPT
root> iptables -A INPUT -m state --state NEW -p tcp --dport 53   -j ACCEPT
root> iptables -A INPUT -m state --state NEW -p udp --dport 53   -j ACCEPT
root> iptables -A INPUT   -j REJECT --reject-with icmp-host-prohibited
root> iptables -A FORWARD -j REJECT --reject-with icmp-host-prohibited
root> iptables-save > /etc/firewall.conf
root> chmod 600 /etc/firewall.conf
root> vi /etc/rc.local
  iptables-restore < /etc/firewall.conf

# Install the all the modules (except ruby) that we will need.
root> apt-get install apache2 libapache2-mod-passenger \
        mysql-server mysql-client libmysqlclient-dev \
        subversion subversion-tools \
        libcurl4-openssl-dev libssl-dev libopenssl-ruby \
        apache2-prefork-dev libapr1-dev libaprutil1-dev
root> # yum install httpd-devel mysql-devel mysql-server svn curl-devel

# Build and install ruby from source to get good version.
root> cd
root> mkdir build
root> cd build
root> wget http://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.2-p180.tar.bz2
root> tar -xjf ruby*.bz2
root> cd ruby-1.9.2-p180
root> # check lscpu and /proc/cpuinfo for cpu type
root> setenv CFLAGS "-O3 -m64 -march=core2"
root> ./configure --with-ruby-version=1.9.2
root> make install
root> rehash

# Ditto for rubygems.
root> cd ~/build
root> wget http://production.cf.rubygems.org/rubygems/rubygems-1.6.2.tgz
root> tar -xzf rubygems*.tgz
root> cd rubygems-1.6.2
root> ruby setup.rb --prefix=/usr/local --verbose
root> rehash
root> cd

# Now we can install ruby gems properly.
root> gem install rails --version=2.1.1 --verbose --no-rdoc --no-ri
root> gem install mysql2 --verbose --no-rdoc --no-ri
root> gem install test-unit --verbose --no-rdoc --no-ri
root> gem install RedCloth --verbose --no-rdoc --no-ri

# Install rails apps.
root> mkdir /var/web
root> mkdir /var/web/mo
root> chown mo:mo /var/web/mo
root> chmod 750 /var/web/mo
root> cd /var/web
root> su mo
mo> svn co svn://user@repository.com/var/svn mo
mo> mkdir mo/tmp mo/log mo/public/images/{thumb,320,640,960,1280,orig}
mo> touch mo/tmp/restart.txt
mo> vi mo/config/consts-site.rb
  # Override these defaults.
  DOMAIN         = 'mushroomobserver.org'
  HTTP_DOMAIN    = 'http://mushroomobserver.org'
  SERVER_CODE    = 'us1'
  DEFAULT_LOCALE = 'en-US'
  BAD_DOMAINS    = ["www.#{DOMAIN}"]

  # Use queued email mechanism.
  QUEUE_EMAIL = true

  # Nathan wants to be BCC'ed on every single email.
  EXTRA_BCC_EMAIL_ADDRESSES = "mo@collectivesource.com"

  # Date after which votes become public.
  VOTE_CUTOFF = '20100405'

  # Set timezone?
  ENV['TZ'] = 'Eastern Time (US & Canada)'

  # Use CDMR mail server for ActionMailer.
  config.action_mailer.smtp_settings = {
    :address        => 'mail.digitalmycology.com',
    :port           => 587,
    :domain         => 'digitalmycology.com',
    :authentication => :login,
    :user_name      => 'mo@digitalmycology.com',
    :password       => 'xxx',
  }
mo> exit

# Configure apache.
root> vi /etc/apache2/sites-available/mo
  <VirtualHost *:80>
    ServerName mushroomobserver.org
    DocumentRoot /var/web/mo/public
    RailsEnv production
    SetEnv TZ 'Eastern Time (US & Canada)'

    <Directory /var/web/mo/public>
      Options FollowSymLinks
      AllowOverride limit
      Order allow,deny
      Allow from all
    </Directory>

    RewriteEngine on

    # Explicitly tell apache where to find static content in /public.
    # (Applies to several specific subdirs and any URL like /blah.ext.)
    RewriteRule ^/(lichens|stylesheets|javascripts|[\w\-\.]+\.\w+)(.*)$ /public/$1$2 [QSA]

    # Redirect all but thumbnails to image server.
    # RewriteRule ^/images/thumb/(.*)$ http://images.digitalmycology.com/thumb/$1 [QSA]
    # RewriteRule ^/images/320/(.*)$ http://images.digitalmycology.com/320/$1 [QSA]
    RewriteRule ^/images/640/(.*)$ http://images.digitalmycology.com/640/$1 [QSA]
    RewriteRule ^/images/960/(.*)$ http://images.digitalmycology.com/960/$1 [QSA]
    RewriteRule ^/images/1280/(.*)$ http://images.digitalmycology.com/1280/$1 [QSA]
    RewriteRule ^/images/orig/(.*)$ http://images.digitalmycology.com/orig/$1 [QSA]
  </VirtualHost>
root> a2dissite default
root> a2ensite mo
root> a2enmod rewrite
root> usermod -a -G mo www-data

# Create database.
root> mysql -u root -p
  create database mo_production;
  create user 'mo'@'localhost' identified by 'xxx';
  # set password for 'mo'@'localhost' = password('xxx');
  grant all privileges on mo_production.* to 'mo'@'localhost' with grant option;
root> cd /var/web/mo
root> cp config/database.yml-template config/database.yml
root> vi config/database.yml
  # Change these values in production section: (other sections aren't needed)
  adapter:  mysql2
  database: mo
  password: xxx
  socket:   /var/run/mysqld/mysqld.sock
  encoding: utf8
root> cd /var/web/mo/db
root> scp user@oldserver:/var/web/mo/db/checkpoint.gz .
root> gunzip checkpoint.gz
root> mosqle checkpoint

# Install passenger.
root> gem install passenger --verbose --no-rdoc --no-ri
root> rehash
root> passenger-install-apache2-module
  # Pay attention to output at end and make sure values below are right.
root> vi /etc/apache2/mods-available/passenger.conf
  # Change root to /usr/local/lib/ruby/gems/1.9.2/gems/passenger-3.0.5
  # Change ruby to /usr/local/bin/ruby
root> vi /etc/apache2/mods-available/passenger.load
  # Change to /usr/local/lib/ruby/gems/1.9.2/gems/passenger-3.0.5/ext/apache2/mod_passenger.so
root> service apache2 stop
root> service apache2 start
# (For some reason reload and restart don't always work.)

# For ImageMagick.
root> apt-get install imagemagick libmagickcore-dev libmagickwand-dev
root> # yum install ImageMagick-devel
root> gem install rmagick --verbose --no-rdoc --no-ri
root> gcc /var/web/mo/script/jpegresize.c -ljpeg -lm -O2 -o /usr/local/bin/jpegresize

# Set up password-less ssh for image transfers.
root> mo
mo> ssh-keygen -t rsa
  # Just press return three times, tell it to overwrite id_rsa.pub if it asks.
mo> ssh-copy-id -i ~/.ssh/id_rsa.pub cdmr@images.digitalmycology.com
  # Enter password.
mo> ssh cdmr@images.digitalmycology.com
  # (just make sure it works)
cdmr@dm.com> exit
mo> exit

# Set up simple mailserver using postfix.
root> apt-get install postfix mutt
  # Select "internet site" when it prompts you.
  # Enter the proper hostname as "system mail name" (should resolve back with reverse DNS).
root> # yum install postfix mutt
root> vi /etc/aliases
  # Change where root's mail goes.
  root: jason,...
root> newaliases
root> vi /home/jason/.forward
  pellaea@gmail.com

# Configure no-reply to bounce correctly.
root> useradd -m no-reply
root> passwd -l no-reply
root> cp /var/web/mo/script/autoreply          /usr/local/bin/autoreply
root> cp /var/web/mo/config/no-reply.muttrc    /home/no-reply/.muttrc
root> cp /var/web/mo/config/no-reply.autoreply /home/no-reply/.autoreply
root> cp /var/web/mo/config/no-reply.forward   /home/no-reply/.forward
root> chown -R no-reply:no-reply /home/no-reply
root> chmod 644 /home/no-reply/.[maf]*
root> chmod 755 /usr/local/bin/autoreply

# Test mail server.
root> su jason
jason> cd
jason> vi .muttrc
  set realname="Jason Hollinger"
  set from="jason@mushroomobserver.org"
  set use_from=yes
  set envelope_from=yes
jason> echo "This is a test." | mutt -s test pellaea@gmail.com
  # (Check /var/log/mail.log and /var/log/mail.err.)
jason> exit

# Configure MO's mail.
root> mo
mo> cd
mo> vi .muttrc
  set realname="Mushroom Observer"
  set from="no-reply@mushroomobserver.org"
  set use_from=yes
  set envelope_from=yes
mo> vi .forward
  root
mo> echo "This is another test." | mutt -s test pellaea@gmail.com
mo> exit

# Configure Rails's mail.
# Ask yourself a question via the website:
#   http://xxx.xxx.xxx.xxx/observer/ask_user_question/252
# Probably want to tail -f log/production.log if it's throwing errors.

# Grab thumbnails from image server.
root> mo
mo> vi script/process_image
  # Verify correct address for image server.
mo> vi script/update_images
  # Verify correct address for image server.
mo> script/update_images -v --sync dreamhost --download --thumb --320

# Test image upload on server:
#   http://xxx.xxx.xxx.xxx/observer/create_observation
# Might need to run process_image once by hand before it will be fully automatic.
mo> ls public/images/orig
mo> script/process_image NNNNN jpg 0
mo> exit

# Make sure these services start up at boot.
root> update-rc.d apache2 defaults
root> update-rc.d mysql   defaults
root> update-rc.d postfix defaults

# Setup cron jobs.
root> mo
mo> crontab -e
  */5 * * * * /var/web/mo/script/run_rake email:send
  23  * * * * /var/web/mo/script/parse_log
  13  3 * * * /var/web/mo/script/run_script refresh_name_lister_cache
  43  3 * * * /var/web/mo/script/run_script update_lichen_list
  13  4 * * * /var/web/mo/script/run_script update_images --clean
  33 21 * * * /var/web/mo/script/makexml /var/web/mo/public/eol.xml
mo> exit

# Tests to run after reboot.
root> iptables-save
  # If there are more than a few lines it is probably correct.
root> ps -ef
  # Look for sshd, apache2, Passenger, mysqld, postfix.

# Create additional users for CDMR member access:
root> cd
root> cat > password_email <<EOB
      I've created an account on the new mushroomobserver.org server for you.
      Please log in using an ssh (Secure Shell) client and change your
      password at your earliest convenience: 

        ssh USER@`cat /etc/ip`
        (password = PASS)

      If you don't have an ssh client, or if you have any problems logging
      in, please let me know by replying to this email. 

      As a member of CDMR, you should have already received a copy of the
      administrative details for Mushroom Observer, including the root
      password for this new server.  However, for security reasons, we do not
      allow direct ssh log-in as root, so in the unlikely event that you need
      to access the server, you will need to login using your individual
      account, instead.  Once logged in you can switch to root via "su root". 

      If you prefer, you do not need to do any of this (let me know), but we
      would like at least a few members of CDMR to maintain active accounts
      on our servers, in case of emergency. 

      Thank you for your time,
      Jason Hollinger
      Mushroom Observer System Administrator
      EOB
root> foreach user (anne darv mgwood mike velosa)
        set pass=`cat /dev/urandom | tr -dc A-Za-z0-9_ | head -c8`
        useradd -m -s /bin/tcsh $user
        echo "$user":"$pass" | chpasswd
        passwd -e $user
        cat password_email | sed "s/USER/$user/g" | sed "s/PASS/$pass/" | \
          mail -s "account on mushroomobserver.org" pellaea@gmail.com
      end

# If you need to remove a user completely (e.g., a test user):
# root> userdel -r $user

# To copy over login information from another server instance:
root> vi /etc/shadow
  # (copy lines from the same file on the other server)

################################################################################

The following are notes concerning problems I had migrating from one server
to another.

# In order to share database with another server.
new_root> vi /etc/mysql/my/cnf
  # Comment out the following line.
  # bind-address = 127.0.0.1
new_root> mysql -u root -p
  create user 'mo'@'old.ip.adr.num' identified by 'xxx';
  grant all privileges on mo_production.* to 'mo'@'old.ip.adr.num' with grant option;
new_root> ssh root@old.ip.adr.num
old_root> mysqladmin --protocol=tcp -u mo -p'xxx' --host=new.ip.adr.num ping

# To switch databases once old server can connect to new database.
old_root> service apache2 stop
old_root> mo
old_mo> cd db
old_mo> ./dump
old_mo> ssh root@new.ip.adr.num
new_root> mo
new_mo> cd db
new_mo> scp root@old.ip.adr.num:/var/web/mo/db/checkpoint.gz .
new_mo> gunzip checkpoint.gz
new_mo> mosqle checkpoint
new_mo> exit
new_root> exit
old_mo> cd ..
old_mo> vi config/database.yml
  production:
    database: mo_production
    host:     new.ip.adr.num
    username: mo
    password: xxx
old_mo> rake db:version
  # Make sure Rails can connect correctly.
old_mo> exit
old_root> service apache2 start
old_root> exit

