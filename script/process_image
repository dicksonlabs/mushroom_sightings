#!/bin/sh

id=$1
ext=$2
set_size=$3

server=velosa@images.mushroomobserver.org:images.mushroomobserver.org
images=public/images

orig=$images/orig/$id.$ext
full=$images/orig/$id.jpg
huge=$images/1280/$id.jpg
large=$images/960/$id.jpg
medium=$images/640/$id.jpg
small=$images/320/$id.jpg
thumb=$images/thumb/$id.jpg

big_icon=$images/place_holder_640.jpg
small_icon=$images/place_holder_thumb.jpg

log=log/process_image.$$
log2=log/process_image.log
email=webmaster@mushroomobserver.org

path=(. /bin /usr/bin /usr/local/bin)

errors=0

if [[ $RAILS_ENV == 'production' ]]; then
    production=1
else
    production=0
fi

# ----------------------------
#  Help message.
# ----------------------------

if [[ $1 == '-h' || $1 == '--help' ]]; then cat <<-EOH; exit -1

	USAGE:
	    script/process_image <id>

	DESCRIPTION:
	    This is used by the webserver to resize and transfer uploaded
	    images to the image server.  It is intended to run
	    asynchronously.  One of these jobs is spwaned for each image
	    uploaded.  Each process first creates temporary soft links to a
	    place-holder image so that the user sees at least something while
	    waiting for the images to be processed.  Then it runs convert
	    (from ImageMagick suite) to downsize the image, first checking
	    that no one else is running convert.  If another process is
	    running convert, it sleeps a few seconds and tries again.  After
	    images are resized, it transfers them to the image server using
	    scp, again waiting for other scp jobs to finish first.  It emails
	    the webmaster if there are any errors.
	
	FILES:
	    webmaster       $email
	    image server    $server
	    place-holders   $big_icon
	                    $small_icon
	    error log       $log2

	EOH
fi

# --------------------------------------------------
#  Run a command, logging both command and result.
#  Sets errors to true if anything fails.
# --------------------------------------------------

function run() {
echo $*
    echo "`date`>" $* >> $log
    if !($* >> $log 2>&1); then
        errors=1
        echo '**** FAILED ****' >> $log
    fi
}

# -----------------------------------------------
#  Create links to stock image as place-holders
#  until smaller images are done.
# -----------------------------------------------

run cp $small_icon $thumb
run cp $small_icon $small
run cp $big_icon $medium
run cp $big_icon $large
run cp $big_icon $huge

# ----------------------------
#  Resize images.
# ----------------------------

# Wait for other conversions to finish first.
while (ps -e | grep ' convert$' > /dev/null); do sleep 5; done

if [[ $orig != $full ]]; then
  run convert -thumbnail -quality 70 $orig $full
fi

if (( $set_size )); then
  run script/set_image_size $full $id
fi

run convert -thumbnail '160x160>' -quality 90 $full $thumb
run convert -thumbnail '320x320>' -quality 80 $full $small
run convert -thumbnail '640x640>' -quality 70 $full $medium
run convert -thumbnail '960x960>' -quality 70 $full $large
run convert -thumbnail '1280x1280>' -quality 70 $full $huge

# ----------------------------
#  Transfer images.
# ----------------------------

# Careful!  Don't do this in test mode!
if (( $production )); then

  # Wait for other transfers to finish first.
  while (ps -e | grep ' scp$' > /dev/null); do sleep 5; done

  if [[ $orig != $full ]]; then
    run scp $orig   $server/orig/$id.$ext
  fi
  run scp $full   $server/orig/$id.jpg
  run scp $huge   $server/1280/$id.jpg
  run scp $large  $server/960/$id.jpg
  run scp $medium $server/640/$id.jpg
  run scp $small  $server/320/$id.jpg
  run scp $thumb  $server/thumb/$id.jpg
fi

# ------------------------------
#  Report errors to webmaster.
# ------------------------------

cat $log >> $log2
if (( $errors && $production )); then
    mutt -s '[MO] process_image' $email < $log
fi
rm -f $log

exit $errors
