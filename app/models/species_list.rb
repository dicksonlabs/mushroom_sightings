class SpeciesList < ActiveRecord::Base
  has_and_belongs_to_many :observations
  belongs_to :user
  has_one :rss_log
  attr_accessor :data

  def log(msg)
    if self.rss_log.nil?
      self.rss_log = RssLog.new
    end
    self.rss_log.addWithDate(msg)
  end
  
  def orphan_log(entry)
    self.log(entry) # Ensures that self.rss_log exists
    self.rss_log.species_list = nil
    self.rss_log.add(self.unique_name)
  end

  def species
    ''
  end
  
  def species=(list)
  end

  def file=(file_field)
    content_type = file_field.content_type.chomp
    if ('application/text' == content_type or 'text/plain' == content_type or 'application/octet-stream' == content_type)
      self.data = file_field.read
    end
  end
  
  # Process simple species lists of the form [<name>{\n\r}]+
  def process_simple_list(args)
    entry_text = self.data.split(/\s*[\n\r]\s*/)
    now = args["created"]
    entry_text.each do |e|
      args["when"] = now
      what = e.strip.squeeze
      if what != ''
        args["what"] = what
        obs = Observation.new(args)
        obs.save
        self.observations << obs
      end
    end
  end
  
  # Process species lists that get generated by the Name species listing program
  def process_name_list(args)
    entry_text = self.data.gsub('[','').split(/\s*\r\]\r\s*/)
    now = args["created"]
    entry_text.each do |e|
      args["when"] = now
      args["what"] = nil
      e.split(/\s*\r\s*/).each do |key_value|
        kv = key_value.split(/\s*\|\s*/)
        if kv.length != 2
          raise sprintf("Bad key|value pair (%s) in %s", key_value, filename)
        end
        key, value = kv
        if key == 'Date'
          args["when"] = Time.local(*(ParseDate.parsedate(value)))
        elsif key == 'Name'
          args["what"] = value.strip.squeeze
        elsif key == 'Time'
          # Ignore
        else
          raise sprintf("Unrecognized key|value pair: %s\n", key_value)
        end
      end
      if args["what"]
        obs = Observation.new(args)
        obs.save
        self.observations << obs
      end
    end
  end
  
  def process_file_data(user, notes)
    if self.data
      args = {}
      now = Time.now 
      args["created"] = now
      args["modified"] = now
      args["user"] = user
      args["where"] = self.where
      args["notes"] = notes
      if self.data[0] == 91 # '[' character
        process_name_list(args)
      else
        process_simple_list(args)
      end
    end
  end
  
  def unique_name
    title = self.title
    if title
      sprintf("%s (%d)", title[0..(MAX_FIELD_LENGTH-1)], self.id)
    else
      sprintf("Species List %d", self.id)
    end
  end
  
  def construct_observation(s, args)
    species_name = s.strip()
    if species_name != ''
      args["what"] = species_name
      if args["where"] == ''
        args["where"] = self.where
      end
      obs = Observation.new(args)
      obs.save
      self.observations << obs
    end
  end
  
  validates_presence_of :title
end
