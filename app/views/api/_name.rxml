# Locals:
#   :name               Name instance.
#   :details            Boolean: include details?
#   :refs               Boolean: include synonyms and ancestors?

details ||= false
refs    ||= false

xml.name(
  :id => name.id,
  :url => "#{DOMAIN}/name/show_name/#{name.id}"
) do
  xml.text_name  name.text_name
  xml.author     name.author
  xml.citation   name.citation
  xml.rank       name.rank.to_s.downcase
  xml.deprecated name.deprecated ? 'true' : 'false'

  if details
    xml.created  xml_datetime(name.created)
    xml.modified xml_datetime(name.modified)

    # authors
    # editors
    # descriptions
    # ...
  end

  if refs && name.synonym
    xml.synonyms(:number => name.synonym.names.length - 1) do
      for synonym in name.synonym.names - [name]
        render_xml_partial(xml, :name, :locals => {
          :name => synonym,
          :details => false,
        })
      end
    end
  end

  if refs && name.classification.to_s != ''

    # This is less complete but doesn't require any additional queries.
    parse = Name.parse_classification(name.classification)
    xml.classification(:number => parse.length) do
      for rank, name in parse
        xml.name do
          xml.rank rank.to_s
          xml.text_name name
        end
      end
    end

    # This requires extra database queries.
    # ancestors = name.ancestors
    # xml.classification(:number => ancestors.length) do
    #   for parent in ancestors
    #     render_xml_partial(xml, :name, :locals => {
    #       :name => parent,
    #       :details => false,
    #     })
    #   end
    # end
  end
end
