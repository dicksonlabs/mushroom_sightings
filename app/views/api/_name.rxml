# Locals:
#   :object             Name instance.
#   :detail             Boolean: include details?
#   :refs               Boolean: include synonyms and ancestors?

detail ||= false
refs   ||= false

xml.name(
  :id  => object.id,
  :url => "#{HTTP_DOMAIN}/name/show_name/#{object.id}"
) do
  xml.text_name  object.text_name
  xml.author     object.author
  xml.citation   object.citation
  xml.rank       object.rank.to_s.downcase
  xml.deprecated object.deprecated ? 'true' : 'false'

  if detail
    xml.created  object.created.api_time
    xml.modified object.modified.api_time

    # authors
    # editors
    # descriptions
    # ...
  end

  if refs && object.synonym
    xml.synonyms(:number => object.synonym.names.length - 1) do
      for synonym in object.synonym.names - [name]
        render_xml_partial(xml, :name, :locals => {
          :object => synonym,
          :detail => false,
        })
      end
    end
  end

  if refs && object.classification.to_s != ''

    # This is less complete but doesn't require any additional queries.
    parse = Name.parse_classification(object.classification)
    xml.classification(:number => parse.length) do
      for rank, name in parse
        xml.name do
          xml.rank rank.to_s
          xml.text_name name
        end
      end
    end

    # This requires extra database queries.
    # all_parents = object.all_parents
    # xml.classification(:number => all_parents.length) do
    #   for parent in all_parents
    #     render_xml_partial(xml, :name, :locals => {
    #       :object => parent,
    #       :detail => false,
    #     })
    #   end
    # end
  end
end
