# ***********************************************************
# MO Backend PHP Script for Wikipedia Upload Script
#
# Kass Lloyd - 11/5/2009
#
# Purpose: script to aid in automation of uploading images to
# wikimedia Commons. Provides backend interface to MO for
# automated scripts to pull information about files and
# search for free images.
#
# (translated for Ruby on Rails by Jason Hollinger)
# ***********************************************************

xml.instruct!(:xml, :version => "1.0")
xml.mushroomobserver do
  xml.script_version  "0.4"
  xml.script_date     "11/5/2009"
  xml.script_run_date (starttime = Time.now)
  
  errors = []

  # get the GET variables and clean them
  id = params[:id].to_i
  cmd = params[:cmd].to_s.downcase
  query = params[:q].to_s.capitalize

  case cmd
    when 'observation':
      if id == 0
        errors.push ['Malformed URL: Observation ID missing.  Example: http://mushroomobserver.org/observer/backend?cmd=observation&id=1234', true]
      else
        obs = Observation.find(id)
        xml.observation do
          xml.id      id
          xml.species obs.name.text_name
          xml.author  obs.name.author
          xml.name_id obs.name_id
          xml.date    obs.when

          # Classification stuff, may not always exist, but should be uniform in size per "self.validate_classification" in app/models/name.rb
          if obs.name.classification.to_s != ''
            xml.classification do
              classes = obs.name.classification.to_s.gsub('_', ' ').gsub(/\r*\n/, '|').gsub(':', '').to_lower # ereg_replace("2,end", ' ',classes) huh???
              classes.split('|').each do |x|
                rank, classname = x.strip.split
                xml[rank] = classname.capitalize
              end
            end
          end

          # process notes to be wiki compatable
          xml.notes obs.notes.to_s.gsub(/\r*\n/, '<br/>') # strip_tags(notes,"<br>") huh???

          # Check if Location exists or if it's just a Where
          if obs.location
            loc = obs.location
            xml.location do
              xml.name  loc.display_name
              xml.north '%.4f' % loc.north
              xml.south '%.4f' % loc.south
              xml.east  '%.4f' % loc.east
              xml.west  '%.4f' % loc.west
              xml.lat   '%.4f' % ((loc.north + loc.south) / 2)
              xml.long  '%.4f' % ((loc.east  + loc.west)  / 2)
            end
          else
            xml.location do
              xml.name obs.where
            end
          end

          # output array for user info
          xml.user do
            user = obs.user
            xml.id    user.id
            xml.name  user.name
            xml.login user.login
          end

          xml.images do
            if obs.images.empty?
              errors.push ['This observation has no images.', false]
            else
              obs.images do |img|
                xml.file do
                  xml.id               img.id
                  xml.content_type     img.content_type
                  xml.when             img.when
                  xml.notes            img.notes.gsub(/\r*\n/, '<br/>')  # strip_tags(inotes,"<br>") huh???
                  xml.license          img.license.display_name
                  xml.license_url      img.license.url
                  xml.copyright_holder img.copyright_holder
                  xml.user_name        img.user.name
                  xml.user_login       img.user.login
                end
              end
            end
            xml.totalimages obs.images.length
          end
        end
      end

    when 'image':
      if id == 0
        errors.push ['Malformed URL: Image ID missing.', true]
      else
        # ...
      end

    when 'search':
      if query == ""
        errors.push ['Malformed URL: Search Query Empty.', true]
      else
        # ...
      end

    else
      errors.push ['Malformed URL: cmd unknown.  Example: http://mushroomobserver.org/observer/backend?cmd=observation&id=1234', true]
  end

  # finish up.
  xml.errors do
    i = 1
    errors.each do |e|
      xml.error(:number => i, :text => e[0], :fatal => e[1] ? 'YES' : 'NO')
      i += 1
    end
  end

  endtime = Time.now
  totaltime = endtime - starttime
  xml.script_run_time totaltime
end
