<!--[form:naming]-->

<%# Section for handling deprecated, new and multiple names on naming creation and edit pages %>
<% if @what && @what != '' %>
  <% if @valid_names %>
    <div class="Errors">
      <span class="Data"><%= :form_naming_deprecated.l % h(@what) %></span><br/>
      <% if @valid_names.length > 0 %>
        <span class="HelpNote"><%= :form_naming_deprecated_help.l % [button_name, h(@what)] %></span><br/>
        <span class="Data"><%= :form_naming_valid_synonyms.l %>:<br/>
          <% for n in @valid_names %>
            &nbsp;&nbsp;<%= radio_button('chosen_name', 'name_id', n.id) %>
            <%= textilize_without_paragraph(h(n.display_name)) %><br/>
          <% end %>
        </span>
      <% else %>
        <span class="HelpNote"><%= :form_naming_not_recognized_help.l % button_name %></span><br/>
      <% end %>
    </div>
  <% elsif @names && @names.length == 0 %>
    <div class="Errors">
      <span class="Data"><%= :form_naming_not_recognized.l % h(@what) %></span><br/>
      <span class="HelpNote"><%= :form_naming_not_recognized_help.l % button_name %></span><br/>
    </div>
  <% elsif @names && @names.length > 1 %>
    <div class="Errors">
      <span class="Data"><%= :form_naming_multiple_names.l % h(@what) %>:<br/>
        <% for n in @names %>
          &nbsp;&nbsp;<%= radio_button('chosen_name', 'name_id', n.id) %>
          <%= textilize_without_paragraph(h(n.display_name)) %>
            (<%= n.observations.size %>)<br/>
        <% end %>
      </span>
      <span class="HelpNote"><%= :form_naming_multiple_names_help.l %></span><br/>
    </div>
  <% end %>
<% end %>

<%# Yes, "name name" is stupid, but it avoids the even stupider requirement
  # of creating dummy what() and what=() methods in the Naming model. %>
<label for="name_name"><%= :form_naming_name.l %>:</label>
<%= text_field_with_auto_complete('name', 'name', { :value => @what },
  { :skip_style => true, :indicator => 'indicator' }) %><br/>
<% if action == 'create_observation' %>
  <span class="HelpNote"><%= :form_naming_name_help_create.l %></span><br/>
<% end %>
<span class="HelpNote"><%= :form_naming_name_help.l %></span><br/><br/>
<%= javascript_tag "document.getElementById('name_name').focus()" if !@focused %>

<%
# This makes the autocomplete field (what) scrollable.  It just adds a
# new class to the popup box (created by rails).  The new class fixes the width
# (no matter how many lines match the partial), and forces the browser to
# display scrollbars.  All the rest is done in the custom methods provided at
# the top of create/edit_observation/naming.rhtml.
%>
<%= javascript_tag 'Element.addClassName($("name_name_auto_complete"),
  "auto_complete_scroll")' %>

<label for="vote_value"><%= :form_naming_confidence.l %>:</label>
<%= select('vote', 'value', @confidence_menu, { :include_blank =>
  action == 'edit_naming' ? false : true }) %><br/>
<span class="HelpNote"><%= :form_naming_confidence_help.l %></span><br/><br/>

<% for r in @reason.values.sort {|a,b| a.order <=> b.order}
  i       = r.reason
  label   = r.label.l
  check   = !r.notes.nil?
  notes   = r.notes.nil? ? '' : r.notes
  default = r.default? %>
  <%= check_box('reason', 'check', { :index => i, :checked => check }) %>
  <label for="reason_<%= i %>_check"><%= label %>
    <%= default ? '(default)' : '' %></label><br/>
  <%= text_area('reason', 'notes', { :index => i, :cols => 40, :rows => 2,
    :value => notes }) %><br/><br/>
<% end %>

<!--[eoform:naming]-->
