# Locals:
#   :name               Name instance.
#   :details            Boolean: include details?
#   :refs               Boolean: include synonyms and ancestors?

details ||= false
refs    ||= false

xml.name do
  xml.id         name.id
  xml.value      name.text_name
  xml.author     name.author
  xml.citation   name.citation
  xml.rank       name.rank.to_s
  xml.deprecated name.deprecated ? 'true' : 'false'

  if details
    xml.created  xml_time(name.created)
    xml.modified xml_time(name.modified)

    # authors
    # editors
    # descriptions
    # ...
  end

  if refs && name.synonym
    xml.synonyms do
      xml.number name.synonym.names.length - 1
      for synonym in name.synonym.names - [name]
        render_xml_partial(xml, :name, :locals => {
          :name => synonym,
          :details => false,
        })
      end
    end
  end

  if refs && name.classification.to_s != ''
    xml.classification do

      # This is less complete but doesn't require any additional queries.
      parse = Name.parse_classification(name.classification)
      xml.number parse.length
      for rank, name in parse
        xml.name do
          xml.rank rank.to_s
          xml.name name
        end
      end

      # This requires extra database queries.
      # ancestors = name.ancestors
      # xml.number ancestors.length
      # for parent in ancestors
      #   render_xml_partial(xml, :name, :locals => {
      #     :name => parent,
      #     :details => false,
      #   })
      # end
    end
  end
end
