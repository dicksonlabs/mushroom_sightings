<%
  new_tab_set(:sort_by_header.t, @sorts)
  new_tab_set do
    add_tab(:list_place_names_map.t, :action => :map_locations,
            :params => query_params)
    add_tab(:all_objects.t(:type => :location), :action => :list_locations)
    add_tabs(@links)
  end

  if (!@known_pages || @known_pages.length == 0) and
     (!@undef_pages || @undef_pages.length == 0)
    @error ||= :runtime_no_matches.t(:type => :location)
    flash_error @error
  end
%>

<table cellpadding="5" cellspacing="0" width="100%">
  <tr valign="top">

    <td>
      <div class="SubTitle"><%= :list_place_names_known.t %></div>
      <% paginate_block(@known_pages) do %>
        <table cellpadding="5" cellspacing="0" width="100%">          
          <% odd_or_even = 0
          for location in @known_data
            odd_or_even = 1 - odd_or_even %>
            <tr valign="top" class="ListLine<%= odd_or_even %>">
              <td width="100%">
                <%= link_to(location.display_name.t, :action => 'show_location',
                            :id => location.id, :params => query_params) %>
              </td>
            </tr>
          <% end %>
        </table>
      <% end %>
    </td>

    <% if @undef_pages && @undef_pages.num_total > 0 %>
      <td>
        <div class="SubTitle"><%= :list_place_names_undef.t %></div>
        <% paginate_block(@undef_pages) do %>
          <table cellpadding="5" cellspacing="0" width="100%">          
            <% odd_or_even = 0
            for datum in @undef_data
              odd_or_even = 1 - odd_or_even %>
              <tr valign="top" class="ListLine<%= odd_or_even %>">
                <td width="100%">
                <%= location_link(datum["where"], nil, datum["cnt"]) %>
                <%= link_to(:list_place_names_merge.t,
                            :action => 'list_merge_options',
                            :where => datum["where"]) %>
                </td>
              </tr>
            <% end %>
          </table>
        <% end %>
      </td>
    <% end %>

  </tr>
</table>
